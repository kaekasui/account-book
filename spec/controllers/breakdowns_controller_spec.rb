require 'rails_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BreakdownsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Breakdown. As you add validations to Breakdown, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BreakdownsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:user) { create(:user) }
  let(:category) { create(:category) }

  before do
    sign_in user
  end

  describe "GET index" do
    it "assigns all breakdowns as @breakdowns" do
      breakdown = create(:breakdown, user_id: user.id, category_id: category.id)
      get :index
      expect(assigns(:breakdowns)).to eq([breakdown])
    end
  end

  describe "GET edit" do
    it "assigns the requested breakdown as @breakdown" do
      breakdown = create(:breakdown, user_id: user.id, category_id: category.id)
      get :edit, { id: breakdown.id }
      expect(assigns(:breakdown)).to eq(breakdown)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Breakdown" do
        expect {
          post :create, { breakdown: attributes_for(:breakdown, category_id: category.id), format: :js }
        }.to change(Breakdown, :count).by(1)
      end

      it "assigns a newly created breakdown as @breakdown" do
        post :create, { breakdown: attributes_for(:breakdown, category_id: category.id), format: :js }
        expect(assigns(:breakdown)).to be_a(Breakdown)
        expect(assigns(:breakdown)).to be_persisted
      end

      # レスポンスのステータスが200になること
      it "has response status code, 200" do
        post :create, { breakdown: attributes_for(:breakdown, category_id: category.id), format: :js }
        expect(response.status).to eq 200
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved breakdown as @breakdown" do
        post :create, { breakdown: attributes_for(:breakdown, name: "", user_id: user.id, category_id: category.id), format: :js }
        expect(assigns(:breakdown)).to be_a_new(Breakdown)
      end

      it "re-renders the 'new' template" do
        post :create, {:breakdown => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested breakdown" do
        breakdown = create(:breakdown, user_id: user.id, category_id: category.id)
        put :update, { id: breakdown.id, breakdown: attributes_for(:breakdown, name: "new", category_id: category.id) }
        breakdown.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested breakdown as @breakdown" do
        breakdown = create(:breakdown, user_id: user.id, category_id: category.id)
        put :update, { id: breakdown.id, breakdown: attributes_for(:breakdown, name: "new", category_id: category.id) }
        expect(assigns(:breakdown)).to eq(breakdown)
      end

      it "redirects to the breakdowns list" do
        breakdown = create(:breakdown, user_id: user.id, category_id: category.id)
        put :update, { id: breakdown.id, breakdown: attributes_for(:breakdown, name: "new", category_id: category.id) }
        expect(response).to redirect_to(breakdowns_path)
      end
    end

    describe "with invalid params" do
      it "assigns the breakdown as @breakdown" do
        breakdown = create(:breakdown,  user_id: user.id, category_id: category.id)
        put :update, { id: breakdown.id, breakdown: attributes_for(:breakdown, name: "", user_id: user.id, category_id: category.id) }
        expect(assigns(:breakdown)).to eq(breakdown)
      end

      it "re-renders the 'edit' template" do
        breakdown = create(:breakdown,  user_id: user.id, category_id: category.id)
        put :update, { id: breakdown.id, breakdown: attributes_for(:breakdown, name: "", user_id: user.id, category_id: category.id) }
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested breakdown" do
      breakdown = create(:breakdown,  user_id: user.id, category_id: category.id)
      expect {
        delete :destroy, { id: breakdown.id }
      }.to change(Breakdown, :count).by(-1)
    end

    it "redirects to the breakdowns list" do
      breakdown = create(:breakdown,  user_id: user.id, category_id: category.id)
      delete :destroy, { id: breakdown.id }
      expect(response).to redirect_to(breakdowns_url)
    end
  end

  after do
    sign_out :user
  end
end
